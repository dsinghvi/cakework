/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { JessieYoungApi } from "../../../..";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as core from "../../../../core";
import * as errors from "../../../../errors";

export declare namespace Client {
  interface Options {
    environment: string;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  /**
   * Add a movie to the database
   */
  public async createMovie(
    request: JessieYoungApi.CreateMovieRequest
  ): Promise<JessieYoungApi.MovieId> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment, "/movies/create-movie"),
      method: "POST",
      body: await serializers.CreateMovieRequest.json(request),
    });
    if (_response.ok) {
      return await serializers.MovieId.parse(
        _response.body as serializers.MovieId.Raw
      );
    }

    if (_response.error.reason === "status-code") {
      throw new errors.JessieYoungApiError({
        statusCode: _response.error.statusCode,
        responseBody: _response.error.rawBody,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.JessieYoungApiError({
          statusCode: _response.error.statusCode,
          responseBody: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.JessieYoungApiTimeoutError();
      case "unknown":
        throw new errors.JessieYoungApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  /**
   * @throws {JessieYoungApi.MovieDoesNotExistError}
   */
  public async getMovie(
    movieId: JessieYoungApi.MovieId
  ): Promise<JessieYoungApi.Movie> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment, `/movies/${movieId}`),
      method: "GET",
    });
    if (_response.ok) {
      return await serializers.Movie.parse(
        _response.body as serializers.Movie.Raw
      );
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 404:
          throw new JessieYoungApi.MovieDoesNotExistError(
            await serializers.MovieDoesNotExistError.parse(
              _response.error.body as serializers.MovieDoesNotExistError.Raw
            )
          );
        default:
          throw new errors.JessieYoungApiError({
            statusCode: _response.error.statusCode,
            responseBody: _response.error.rawBody,
          });
      }
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.JessieYoungApiError({
          statusCode: _response.error.statusCode,
          responseBody: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.JessieYoungApiTimeoutError();
      case "unknown":
        throw new errors.JessieYoungApiError({
          message: _response.error.errorMessage,
        });
    }
  }
}
